// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc1735.DeepSpace2019.subsystems;

import org.usfirst.frc1735.DeepSpace2019.Robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.Subsystem;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class LED extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark blinkin;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    final DriverStation driverStation = DriverStation.getInstance();

    public LED() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        blinkin = new Spark(2);
        addChild("Blinkin", blinkin);
        blinkin.setInverted(false);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        // We want the ball detector to light up (or change the color of) our onboard
        // lights.

        if (!driverStation.isAutonomous() && (driverStation.getMatchTime() < 10)
                && (driverStation.getMatchTime() > 0)) {
            Robot.lED.setColor(LED.STROBE_RED);
        } else if (Robot.claw.isBallPresent() && Robot.alienDeployer.getState() == AlienDeployer.State.RETRACTED
                && Robot.hatchGrabber.getState() == HatchGrabber.State.CLOSED) {
            Robot.lED.setColor(LED.RED_ORANGE);
        } else {
            if ((Robot.alienDeployer.getState() == AlienDeployer.State.RETRACTED)
                    && (Robot.hatchGrabber.getState() == HatchGrabber.State.CLOSED)) {
                Robot.lED.setColor(LED.DEFAULT);
            } else if ((Robot.alienDeployer.getState() == AlienDeployer.State.EXTENDED)
                    && (Robot.hatchGrabber.getState() == HatchGrabber.State.CLOSED)) {
                Robot.lED.setColor(LED.BLUE);
            } else if ((Robot.alienDeployer.getState() == AlienDeployer.State.EXTENDED)
                    && (Robot.hatchGrabber.getState() == HatchGrabber.State.OPENED)) {
                Robot.lED.setColor(LED.HEARTBEAT_BLUE);
            } else {
                // Divide this error condition into deploy vs hatchGrab error cases
                if ((Robot.alienDeployer.getState() == AlienDeployer.State.IN_MOTION)
                        && (Robot.hatchGrabber.getState() != HatchGrabber.State.IN_MOTION)) {
                    Robot.lED.setColor(LED.HOT_PINK);
                } else if ((Robot.hatchGrabber.getState() != HatchGrabber.State.IN_MOTION)
                        && (Robot.hatchGrabber.getState() == HatchGrabber.State.IN_MOTION)) {
                    Robot.lED.setColor(LED.VIOLET);
                } else if ((Robot.alienDeployer.getState() == AlienDeployer.State.IN_MOTION)
                        && (Robot.hatchGrabber.getState() == HatchGrabber.State.IN_MOTION)) {
                    // Wow, we're screwed. Both systems are broken!
                    Robot.lED.setColor(LED.RAINBOW_RAINBOW);
                }

            }
        }
    }

    public void setColor(double color) {
        blinkin.set(color);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public static final double OFF = 0.99;
    public static final double GREEN = 0.77;
    public static final double ORANGE = 0.65;
    public static final double DEFAULT = 0.53;
    public static final double DEFAULT_FAST = 0.41;

    public static final double HOT_PINK = 0.57;
    public static final double DARK_RED = 0.59;
    public static final double RED = .61;
    public static final double RED_ORANGE = .63;
    public static final double GOLD = 0.67;
    public static final double YELLOW = 0.69;
    public static final double LAWN_GREEN = 0.71;
    public static final double LIME = 0.73;
    public static final double DARK_GREEN = 0.75;
    public static final double BLUE_GREEN = 0.79;
    public static final double AQUA = 0.81;
    public static final double SKY_BLUE = 0.83;
    public static final double DARK_BLUE = 0.85;
    public static final double BLUE = 0.87;
    public static final double BLUE_VIOLET = 0.89;
    public static final double VIOLET = 0.91;
    public static final double WHITE = 0.93;
    public static final double GRAY = 0.95;
    public static final double DARK_GRAY = 0.97;
    public static final double BLACK = 0.99;

    public static final double STROBE_BLUE = -0.09;
    public static final double STROBE_RED = -0.11;
    public static final double HEARTBEAT_BLUE = -0.23;
    public static final double RAINBOW_RAINBOW = -0.99;

    // flashing red for last 10 seconds
    // middle button -
    // extended open -

}
