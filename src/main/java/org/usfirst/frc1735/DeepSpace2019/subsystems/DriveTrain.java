// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.DeepSpace2019.subsystems;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc1735.DeepSpace2019.commands.DriveWithJoystick;
import org.usfirst.frc1735.DeepSpace2019.smartdashboard.SmartDashboardKeys;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.phoenix.ParamEnum;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.RemoteFeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
    

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftMotor;
    private WPI_TalonSRX rightMotor;
    private DifferentialDrive differentialDrive1;
    private WPI_VictorSPX leftFollower;
    private WPI_VictorSPX rightFollower;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftMotor = new WPI_TalonSRX(1);
        
        
        
        rightMotor = new WPI_TalonSRX(2);
        
        
        
        differentialDrive1 = new DifferentialDrive(leftMotor, rightMotor);
        addChild("Differential Drive 1",differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);

        
        leftFollower = new WPI_VictorSPX(3);
        
        
        
        rightFollower = new WPI_VictorSPX(4);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    leftFollower.follow(leftMotor);
    rightFollower.follow(rightMotor);
    leftFollower.setSafetyEnabled(false);
    rightFollower.setSafetyEnabled(false);

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    }

    public void drive(final double joystickAX, final double joystickAY, final double joystickBX, final double joystickBY) {
        final String driveMode = SmartDashboard.getString(SmartDashboardKeys.DRIVETRAIN_MODE, "ARCADE");

        if (driveMode.equals("TANK")) {
            tankDrive(joystickAX, joystickAY, joystickBX, joystickBY);
        } else { // ARCADE is the default/fallback
            arcadeDrive(joystickAX, joystickAY);
        }
    }

    private void tankDrive(final double joystickAX, final double joystickAY, final double joystickBX, final double joystickBY) {
        differentialDrive1.tankDrive(-joystickAY, -joystickBY);
    }

    private void arcadeDrive(final double joystickX, final double joystickY) {
        differentialDrive1.arcadeDrive(-joystickY, joystickX, true);
    }

    public void stop() {
        differentialDrive1.stopMotor();
    }

    public void setArcadeMode() {
        SmartDashboard.putString(SmartDashboardKeys.DRIVETRAIN_MODE, "ARCADE");    
    }

    public void setTankMode(){
        SmartDashboard.putString(SmartDashboardKeys.DRIVETRAIN_MODE, "TANK");
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

