// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc1735.DeepSpace2019.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1735.DeepSpace2019.Robot;
import org.usfirst.frc1735.DeepSpace2019.subsystems.AlienDeployer;

/**
 *
 */
public class AlienDeploy extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_magDir;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AlienDeploy(double magDir) {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_magDir = magDir;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.alienDeployer);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        final double timeout = 1.2;
        if (m_magDir >= 0) {
            setTimeout(timeout);
        } else { // Here we are negative
            setTimeout(timeout);
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        /*
        if ((m_magDir == AlienDeployer.in) && Robot.hatchGrabber.isForwardLimitPressed()) {
            DriverStation.reportError("Cannot retract Alien while HatchGrabber is open", false);
        } else {
            */
            System.out.println("AlienDeploy: " + m_magDir);
            Robot.alienDeployer.alienDeployerMove(m_magDir);
        //}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        boolean timedOut = isTimedOut();
        boolean isExtending = (m_magDir == AlienDeployer.out);
        boolean isRetracting = (m_magDir == AlienDeployer.in);
        boolean forwardLimitPressed = Robot.alienDeployer.isForwardLimitPressed();
        boolean reverseLimitPressed = Robot.alienDeployer.isReverseLimitPressed();

        System.out.print("Checking isFinished for AlienDeploy"
                            + "\n timedOut: " + timedOut
                            + "\n isExtending: " + isExtending + " forwardLimit: " + forwardLimitPressed
                            + "\n isRetracting: " + isRetracting + " reverseLimit: " + reverseLimitPressed + "\n");

        return timedOut;
        /* 
                || ((isExtending) && forwardLimitPressed)
                || ((isRetracting) && reverseLimitPressed);
                */
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.alienDeployer.alienDeployerMove(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
