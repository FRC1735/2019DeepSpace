// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc1735.DeepSpace2019.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1735.DeepSpace2019.Robot;
import org.usfirst.frc1735.DeepSpace2019.subsystems.AlienDeployer;

/**
 *
 */
public class AlienDeploy extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_magDir;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AlienDeploy(double magDir) {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_magDir = magDir;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.alienDeployer);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        m_abort = false; // Reset any prior errors before issuing the command again
        final double timeout = 1.4;
        if (m_magDir >= 0) {
            setTimeout(timeout);
        } else { // Here we are negative
            setTimeout(timeout);
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        // Implement a subsystem interlock:  if for some reason we think the hatchgrabber is currently open, do not try to retract the aliean into the arm!!!
        // Checking for encoder to be at max is not sufficient, because it could be partially open for some reason.
        // So, abort any attempt to retract if the encoder is not reading as fully closed!
        if ((m_magDir == AlienDeployer.in) && !Robot.hatchGrabber.isReverseLimitPressed()) {
            DriverStation.reportError("Cannot retract Alien while HatchGrabber is fully or partially open", false);
            m_abort = true; // set a flag to abort the command
        } else { // Normal operation
            System.out.println("AlienDeploy: " + m_magDir);
            Robot.alienDeployer.alienDeployerMove(m_magDir);
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        boolean timedOut = isTimedOut();
        boolean isExtending = (m_magDir == AlienDeployer.out);
        boolean isRetracting = (m_magDir == AlienDeployer.in);
        boolean forwardLimitPressed = Robot.alienDeployer.isForwardLimitPressed();
        boolean reverseLimitPressed = Robot.alienDeployer.isReverseLimitPressed();

        /*
        System.out.print("Checking isFinished for AlienDeploy"
                            + "\n timedOut: " + timedOut
                            + "\n isExtending: " + isExtending + " forwardLimit: " + forwardLimitPressed
                            + "\n isRetracting: " + isRetracting + " reverseLimit: " + reverseLimitPressed
                            + "\n error_abort: " + m_abort + "\n");
        */
        // Safety check!
        // If we retracted the alien but timed out, it probably means the alien jammed up
        // and the spring couldn't fully pull it back.  In such cases, the string will be
        // slack and might get tangled or (if operator repeatedly retracts) it can wrap
        // the wrong way around the pulley and start extending instead!
        // So...
        // if we timed out, set a flag that disables the alien extend/retract.
        // if the arm gets raised vertically, the alien is likely to finish its retraction
        // and set the reverse limit switch; that can reset the flag and allow normal operation
        if (timedOut && isRetracting) {
            DriverStation.reportError("Failed to fully retract Alien!  Disabling until Alien contacts reverse limit switch.", false);
            Robot.alienDeployer.setTimeoutDisabledFlag(true);
        }

        return timedOut // end (abnormally) as a safety net in case limit switches fail
                || ((isExtending) && forwardLimitPressed) // end (normally) if we extended to our forward limit
                || ((isRetracting) && reverseLimitPressed) // end (normally) if we retracted to our reverse limit
                || m_abort; // end (abnormally) if we took an error due to subsystem interlocks
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.alienDeployer.alienDeployerMove(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }

    //Variable for aborting on an error condition
    boolean m_abort = false;
}
