// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.DeepSpace2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1735.DeepSpace2019.Robot;
import org.usfirst.frc1735.DeepSpace2019.subsystems.Claw;

/**
 *
 */
public class ClawCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_magDir;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ClawCmd(double magDir) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_magDir = magDir;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.claw);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if ((m_magDir == Claw.in) &&  // If we are trying to pull in a ball...
             Robot.claw.isBallPresent()) {
                // Arm the claw retainer here
                Robot.claw.armBallRetainer(true);
                Robot.claw.clawMove(0);
             }
        else {
            Robot.claw.clawMove(m_magDir); // FIXME:  this is not magnitude/direction, but a pseudo-enum for in vs out.  fix the variable name!
            if (m_magDir == Claw.out) {
                // Disarm the claw retainer if we are spitting a ball out deliberatele
                Robot.claw.armBallRetainer(false);
            }
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        // FIXME:  rather than calling isBallPresent (and doing a whole I2C read sequence that duplicates what is in Claw.periodic())
        //         We should perhaps cache the periodic call and use the local state.  Need to determine if periodic runs BEFORE commands, or we might be 20ms stale...
        //         
//        if ((m_magDir == Claw.in) &&  // If we are trying to pull in a ball...
//             Robot.claw.isBallPresent()) { // and we have one...
//                return true; // Terminate the command (which will stop the motor so we don't damage the ball!)
//        }
//        else
            return false; // Keep on rollin...
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
            Robot.claw.clawMove(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
