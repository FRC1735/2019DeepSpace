// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.DeepSpace2019.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc1735.DeepSpace2019.commands.DriveWithPID.ActiveSide;
import org.usfirst.frc1735.DeepSpace2019.subsystems.*;

/**
 *
 */
public class Crab extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public Crab() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        final double crabTurnDistance = 5;
        final double crabDistance = 6; // Total distance to crab
        final double minCrabDistance = 1; // Minimal possible crab distance 
        final double incrementalCrabDistance = crabDistance - minCrabDistance; 
        final double crabTurnAngleDegrees = 13; // Angle turned to accomplish minCrabDistance

        //Calculate the distance backwards to drive to accomplish incrementalCrabDistance
        final double incrementalBackDistance = incrementalCrabDistance/Math.sin(Math.toRadians(crabTurnAngleDegrees));
        // Calculate the distance forward to drive to get back to your starting line 
        final double incrementalForwardDistance = incrementalCrabDistance/Math.tan(Math.toRadians(crabTurnAngleDegrees));

        System.out.println("crabTurnDistance: " + crabTurnDistance);
        System.out.println("crabDistance: " + crabDistance);
        System.out.println("minCrabDistance: " + minCrabDistance);
        System.out.println("incrementalCrabDistance: " + incrementalCrabDistance);
        System.out.println("crabTurnAngleDegrees: " + crabTurnAngleDegrees);
        System.out.println("incrementalBackDistance: " + incrementalBackDistance);
        System.out.println("incrementalForwardDistance: " + incrementalForwardDistance);

        addSequential(new DriveWithPID(-crabTurnDistance, ActiveSide.LEFT));
        addSequential(new DriveWithPID(-incrementalBackDistance, ActiveSide.BOTH));

        addSequential(new DriveWithPID(-crabTurnDistance, ActiveSide.RIGHT));
        addSequential(new DriveWithPID((crabTurnDistance + incrementalForwardDistance), ActiveSide.BOTH));


        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 
    } 
}
