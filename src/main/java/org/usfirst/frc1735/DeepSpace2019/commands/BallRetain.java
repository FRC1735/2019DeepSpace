// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.DeepSpace2019.commands;

import org.usfirst.frc1735.DeepSpace2019.Robot;
import org.usfirst.frc1735.DeepSpace2019.subsystems.Claw;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class BallRetain extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public BallRetain() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.claw);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        // Create a command instance that we can use to trigger a "claw in" under the right circumstances
        clawCommand = new ClawCmd(Claw.in);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        // Problem statement
        // Sometimes moving the robot or the arm causes a "grabbed" ball to be flung loose.
        // We think that selectively activating the claw intake might mitigate this.
        // Intended use:
        // If we are currently holding a ball (detected), arm this system
        // Once armed, if we loose grip on the ball (ball detect is false) then we need to
        // activate the claw intake again to try and retain it.
        // If we spit a ball out deliberately, then disarm this system.
        //
        // Implementation:  Spitting out a ball disarms.
        //                  Any time we are RUNNING the claw intake function and we ALSO detect a ball, we arm.
        if (Robot.claw.ballRetainIsArmed()){ // If we previously grabbed a ball and held it
            if (!Robot.claw.isBallPresent()){ // And if that ball is no longer detected
                if (!clawCommand.isRunning()){ // we might be already spinning the claw from a previous iteration
                    clawCommand.start(); // But if not, activate it now.
                }
            }
        }
        else { // If something has disarmed the system, then cancel this command.  We can start it again later when needed.
            clawCommand.cancel();
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false; // As a default command, this never terminates, but it might get interrupted.
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        // Shouldn't ever get here, but if we do... Cancel any running claw command
        clawCommand.cancel();

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        // Manually pressing a claw in or claw out button might interrupt this command.
        // Go ahead and cancel any running clawcmd so that the user button isn't conflicting with anything
        clawCommand.cancel();
    }
    Command clawCommand;
}
