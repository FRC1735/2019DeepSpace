// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc1735.DeepSpace2019.commands;


import org.usfirst.frc1735.DeepSpace2019.Robot;
import org.usfirst.frc1735.DeepSpace2019.subsystems.HatchGrabber;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class HatchManipulator extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_magDir;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public HatchManipulator(double magDir) {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_magDir = magDir;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.hatchGrabber);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        m_abort = false; // Reset any prior errors before issuing the command again
        //setTimeout(0.75);
        setTimeout(2); //@FIXME:  This is purely for testing on the practice bot, where the motor is too slow to hit the max encoder value before the desired timeout.
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        // The hatchgrabber is not configured to use PID via Robot.hatchGrabber.hatchGrabberPIDMove(m_magDir); we only use open loop plus soft limits via the encoder

        // Implement a subsystem interlock:  If we think the alien is retracted inside the arm, do not attempt to open the hatchgrabber!!
        // Checking for the alien to be at the forward limit is safe because that rules out both partially and fully retracted cases.
        // So, abort any attempt to extend if we do not have positive confirmation of the forward limit switch being pressed.
        if ((m_magDir == HatchGrabber.out) && !Robot.alienDeployer.isForwardLimitPressed()) {
            DriverStation.reportError("Cannot open HatchGrabber when Alien is fully or partially retracted", false);
            m_abort = true; // set a flag to abort the command
        } else { // Normal operation
            System.out.println("HatchManipulator: " + m_magDir);
            Robot.hatchGrabber.hatchGrabberOpenMove(m_magDir);
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        boolean timedOut = isTimedOut();
        boolean isGrabbing = (m_magDir == HatchGrabber.out);
        boolean isReleasing = (m_magDir == HatchGrabber.in);
        boolean forwardLimitPressed = Robot.hatchGrabber.isForwardLimitPressed();
        boolean reverseLimitPressed = Robot.hatchGrabber.isReverseLimitPressed();

        System.out.print("Checking isFinished for HatchManipulator"
                            + "\n timedOut: " + timedOut
                            + "\n isGrabbing: " + isGrabbing + " forwardLimit: " + forwardLimitPressed
                            + "\n isReleasing: " + isReleasing + " reverseLimit: " + reverseLimitPressed
                            + "\n error_abort: " + m_abort + "\n");



        return timedOut // end (abnormally) as a safety net in case limit switches fail
                || (isGrabbing && forwardLimitPressed) // end (normally) if we opened to our forward/max limit
                || (isReleasing && reverseLimitPressed) // end (normally) if we closed to our reverse/min limit
                || m_abort; // end (abnormally) if we took an error due to subsystem interlocks
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.hatchGrabber.hatchGrabberOpenMove(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }

    //Variable for aborting on an error condition
    boolean m_abort = false;

}
